{"version":3,"file":"static/js/726.616127e2.chunk.js","mappings":"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","sources":["components/MeshGradient/GradientRaw.js"],"sourcesContent":["\n\n//Converting colors to proper format\nfunction normalizeColor(hexCode) {\n    return [(hexCode >> 16 & 255) / 255, (hexCode >> 8 & 255) / 255, (255 & hexCode) / 255]\n} [\"SCREEN\", \"LINEAR_LIGHT\"].reduce((hexCode, t, n) => Object.assign(hexCode, {\n    [t]: n\n}), {});\n\n//Essential functionality of WebGl\n//t = width\n//n = height\nclass MiniGl {\n    constructor(canvas, width, height, debug = false) {\n        const _miniGl = this,\n            debug_output = -1 !== document.location.search.toLowerCase().indexOf(\"debug=webgl\");\n        _miniGl.canvas = canvas, _miniGl.gl = _miniGl.canvas.getContext(\"webgl\", {\n            antialias: true\n        }), _miniGl.meshes = [];\n        const context = _miniGl.gl;\n        width && height && this.setSize(width, height), _miniGl.lastDebugMsg, _miniGl.debug = debug && debug_output ? function (e) {\n            const t = new Date;\n            t - _miniGl.lastDebugMsg > 1e3 && console.log(\"---\"), console.log(t.toLocaleTimeString() + Array(Math.max(0, 32 - e.length)).join(\" \") + e + \": \", ...Array.from(arguments).slice(1)), _miniGl.lastDebugMsg = t\n        } : () => { }, Object.defineProperties(_miniGl, {\n            Material: {\n                enumerable: false,\n                value: class {\n                    constructor(vertexShaders, fragments, uniforms = {}) {\n                        const material = this;\n                        function getShaderByType(type, source) {\n                            const shader = context.createShader(type);\n                            return context.shaderSource(shader, source), context.compileShader(shader), context.getShaderParameter(shader, context.COMPILE_STATUS) || console.error(context.getShaderInfoLog(shader)), _miniGl.debug(\"Material.compileShaderSource\", {\n                                source: source\n                            }), shader\n                        }\n                        function getUniformVariableDeclarations(uniforms, type) {\n                            return Object.entries(uniforms).map(([uniform, value]) => value.getDeclaration(uniform, type)).join(\"\\n\")\n                        }\n                        material.uniforms = uniforms, material.uniformInstances = [];\n\n                        const prefix = \"\\n              precision highp float;\\n            \";\n                        material.vertexSource = `\\n              ${prefix}\\n              attribute vec4 position;\\n              attribute vec2 uv;\\n              attribute vec2 uvNorm;\\n              ${getUniformVariableDeclarations(_miniGl.commonUniforms, \"vertex\")}\\n              ${getUniformVariableDeclarations(uniforms, \"vertex\")}\\n              ${vertexShaders}\\n            `,\n                            material.Source = `\\n              ${prefix}\\n              ${getUniformVariableDeclarations(_miniGl.commonUniforms, \"fragment\")}\\n              ${getUniformVariableDeclarations(uniforms, \"fragment\")}\\n              ${fragments}\\n            `,\n                            material.vertexShader = getShaderByType(context.VERTEX_SHADER, material.vertexSource),\n                            material.fragmentShader = getShaderByType(context.FRAGMENT_SHADER, material.Source),\n                            material.program = context.createProgram(),\n                            context.attachShader(material.program, material.vertexShader),\n                            context.attachShader(material.program, material.fragmentShader),\n                            context.linkProgram(material.program),\n                            context.getProgramParameter(material.program, context.LINK_STATUS) || console.error(context.getProgramInfoLog(material.program)),\n                            context.useProgram(material.program),\n                            material.attachUniforms(void 0, _miniGl.commonUniforms),\n                            material.attachUniforms(void 0, material.uniforms)\n                    }\n                    //t = uniform\n                    attachUniforms(name, uniforms) {\n                        //n  = material\n                        const material = this;\n                        void 0 === name ? Object.entries(uniforms).forEach(([name, uniform]) => {\n                            material.attachUniforms(name, uniform)\n                        }) : \"array\" == uniforms.type ? uniforms.value.forEach((uniform, i) => material.attachUniforms(`${name}[${i}]`, uniform)) : \"struct\" == uniforms.type ? Object.entries(uniforms.value).forEach(([uniform, i]) => material.attachUniforms(`${name}.${uniform}`, i)) : (_miniGl.debug(\"Material.attachUniforms\", {\n                            name: name,\n                            uniform: uniforms\n                        }), material.uniformInstances.push({\n                            uniform: uniforms,\n                            location: context.getUniformLocation(material.program, name)\n                        }))\n                    }\n                }\n            },\n            Uniform: {\n                enumerable: !1,\n                value: class {\n                    constructor(e) {\n                        this.type = \"float\", Object.assign(this, e);\n                        this.typeFn = {\n                            float: \"1f\",\n                            int: \"1i\",\n                            vec2: \"2fv\",\n                            vec3: \"3fv\",\n                            vec4: \"4fv\",\n                            mat4: \"Matrix4fv\"\n                        }[this.type] || \"1f\", this.update()\n                    }\n                    update(value) {\n                        void 0 !== this.value && context[`uniform${this.typeFn}`](value, 0 === this.typeFn.indexOf(\"Matrix\") ? this.transpose : this.value, 0 === this.typeFn.indexOf(\"Matrix\") ? this.value : null)\n                    }\n                    //e - name\n                    //t - type\n                    //n - length\n                    getDeclaration(name, type, length) {\n                        const uniform = this;\n                        if (uniform.excludeFrom !== type) {\n                            if (\"array\" === uniform.type) return uniform.value[0].getDeclaration(name, type, uniform.value.length) + `\\nconst int ${name}_length = ${uniform.value.length};`;\n                            if (\"struct\" === uniform.type) {\n                                let name_no_prefix = name.replace(\"u_\", \"\");\n                                return name_no_prefix =\n                                    name_no_prefix.charAt(0).toUpperCase() +\n                                    name_no_prefix.slice(1),\n                                    `uniform struct ${name_no_prefix} \n                                  {\\n` +\n                                    Object.entries(uniform.value).map(([name, uniform]) =>\n                                        uniform.getDeclaration(name, type)\n                                            .replace(/^uniform/, \"\"))\n                                        .join(\"\")\n                                    + `\\n} ${name}${length > 0 ? `[${length}]` : \"\"};`\n                            }\n                            return `uniform ${uniform.type} ${name}${length > 0 ? `[${length}]` : \"\"};`\n                        }\n                    }\n                }\n            },\n            PlaneGeometry: {\n                enumerable: !1,\n                value: class {\n                    constructor(width, height, n, i, orientation) {\n                        context.createBuffer(), this.attributes = {\n                            position: new _miniGl.Attribute({\n                                target: context.ARRAY_BUFFER,\n                                size: 3\n                            }),\n                            uv: new _miniGl.Attribute({\n                                target: context.ARRAY_BUFFER,\n                                size: 2\n                            }),\n                            uvNorm: new _miniGl.Attribute({\n                                target: context.ARRAY_BUFFER,\n                                size: 2\n                            }),\n                            index: new _miniGl.Attribute({\n                                target: context.ELEMENT_ARRAY_BUFFER,\n                                size: 3,\n                                type: context.UNSIGNED_SHORT\n                            })\n                        }, this.setTopology(n, i), this.setSize(width, height, orientation)\n                    }\n                    setTopology(e = 1, t = 1) {\n                        const n = this;\n                        n.xSegCount = e, n.ySegCount = t, n.vertexCount = (n.xSegCount + 1) * (n.ySegCount + 1), n.quadCount = n.xSegCount * n.ySegCount * 2, n.attributes.uv.values = new Float32Array(2 * n.vertexCount), n.attributes.uvNorm.values = new Float32Array(2 * n.vertexCount), n.attributes.index.values = new Uint16Array(3 * n.quadCount);\n                        for (let e = 0; e <= n.ySegCount; e++)\n                            for (let t = 0; t <= n.xSegCount; t++) {\n                                const i = e * (n.xSegCount + 1) + t;\n                                if (n.attributes.uv.values[2 * i] = t / n.xSegCount, n.attributes.uv.values[2 * i + 1] = 1 - e / n.ySegCount, n.attributes.uvNorm.values[2 * i] = t / n.xSegCount * 2 - 1, n.attributes.uvNorm.values[2 * i + 1] = 1 - e / n.ySegCount * 2, t < n.xSegCount && e < n.ySegCount) {\n                                    const s = e * n.xSegCount + t;\n                                    n.attributes.index.values[6 * s] = i, n.attributes.index.values[6 * s + 1] = i + 1 + n.xSegCount, n.attributes.index.values[6 * s + 2] = i + 1, n.attributes.index.values[6 * s + 3] = i + 1, n.attributes.index.values[6 * s + 4] = i + 1 + n.xSegCount, n.attributes.index.values[6 * s + 5] = i + 2 + n.xSegCount\n                                }\n                            }\n                        n.attributes.uv.update(), n.attributes.uvNorm.update(), n.attributes.index.update(), _miniGl.debug(\"Geometry.setTopology\", {\n                            uv: n.attributes.uv,\n                            uvNorm: n.attributes.uvNorm,\n                            index: n.attributes.index\n                        })\n                    }\n                    setSize(width = 1, height = 1, orientation = \"xz\") {\n                        const geometry = this;\n                        geometry.width = width,\n                            geometry.height = height,\n                            geometry.orientation = orientation,\n                            geometry.attributes.position.values && geometry.attributes.position.values.length === 3 * geometry.vertexCount\n                            || (geometry.attributes.position.values = new Float32Array(3 * geometry.vertexCount));\n                        const o = width / -2,\n                            r = height / -2,\n                            segment_width = width / geometry.xSegCount,\n                            segment_height = height / geometry.ySegCount;\n                        for (let yIndex = 0; yIndex <= geometry.ySegCount; yIndex++) {\n                            const t = r + yIndex * segment_height;\n                            for (let xIndex = 0; xIndex <= geometry.xSegCount; xIndex++) {\n                                const r = o + xIndex * segment_width,\n                                    l = yIndex * (geometry.xSegCount + 1) + xIndex;\n                                geometry.attributes.position.values[3 * l + \"xyz\".indexOf(orientation[0])] = r,\n                                    geometry.attributes.position.values[3 * l + \"xyz\".indexOf(orientation[1])] = -t\n                            }\n                        }\n                        geometry.attributes.position.update(), _miniGl.debug(\"Geometry.setSize\", {\n                            position: geometry.attributes.position\n                        })\n                    }\n                }\n            },\n            Mesh: {\n                enumerable: !1,\n                value: class {\n                    constructor(geometry, material) {\n                        const mesh = this;\n                        mesh.geometry = geometry, mesh.material = material, mesh.wireframe = !1, mesh.attributeInstances = [], Object.entries(mesh.geometry.attributes).forEach(([e, attribute]) => {\n                            mesh.attributeInstances.push({\n                                attribute: attribute,\n                                location: attribute.attach(e, mesh.material.program)\n                            })\n                        }), _miniGl.meshes.push(mesh), _miniGl.debug(\"Mesh.constructor\", {\n                            mesh: mesh\n                        })\n                    }\n                    draw() {\n                        context.useProgram(this.material.program), this.material.uniformInstances.forEach(({\n                            uniform: e,\n                            location: t\n                        }) => e.update(t)), this.attributeInstances.forEach(({\n                            attribute: e,\n                            location: t\n                        }) => e.use(t)), context.drawElements(this.wireframe ? context.LINES : context.TRIANGLES, this.geometry.attributes.index.values.length, context.UNSIGNED_SHORT, 0)\n                    }\n                    remove() {\n                        _miniGl.meshes = _miniGl.meshes.filter(e => e != this)\n                    }\n                }\n            },\n            Attribute: {\n                enumerable: !1,\n                value: class {\n                    constructor(e) {\n                        this.type = context.FLOAT, this.normalized = !1, this.buffer = context.createBuffer(), Object.assign(this, e), this.update()\n                    }\n                    update() {\n                        void 0 !== this.values && (context.bindBuffer(this.target, this.buffer), context.bufferData(this.target, this.values, context.STATIC_DRAW))\n                    }\n                    attach(e, t) {\n                        const n = context.getAttribLocation(t, e);\n                        return this.target === context.ARRAY_BUFFER && (context.enableVertexAttribArray(n), context.vertexAttribPointer(n, this.size, this.type, this.normalized, 0, 0)), n\n                    }\n                    use(e) {\n                        context.bindBuffer(this.target, this.buffer), this.target === context.ARRAY_BUFFER && (context.enableVertexAttribArray(e), context.vertexAttribPointer(e, this.size, this.type, this.normalized, 0, 0))\n                    }\n                }\n            }\n        });\n        const a = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n        _miniGl.commonUniforms = {\n            projectionMatrix: new _miniGl.Uniform({\n                type: \"mat4\",\n                value: a\n            }),\n            modelViewMatrix: new _miniGl.Uniform({\n                type: \"mat4\",\n                value: a\n            }),\n            resolution: new _miniGl.Uniform({\n                type: \"vec2\",\n                value: [1, 1]\n            }),\n            aspectRatio: new _miniGl.Uniform({\n                type: \"float\",\n                value: 1\n            })\n        }\n    }\n    setSize(e = 640, t = 480) {\n        this.width = e, this.height = t, this.canvas.width = e, this.canvas.height = t, this.gl.viewport(0, 0, e, t), this.commonUniforms.resolution.value = [e, t], this.commonUniforms.aspectRatio.value = e / t, this.debug(\"MiniGL.setSize\", {\n            width: e,\n            height: t\n        })\n    }\n    //left, right, top, bottom, near, far\n    setOrthographicCamera(e = 0, t = 0, n = 0, i = -2e3, s = 2e3) {\n        this.commonUniforms.projectionMatrix.value = [2 / this.width, 0, 0, 0, 0, 2 / this.height, 0, 0, 0, 0, 2 / (i - s), 0, e, t, n, 1], this.debug(\"setOrthographicCamera\", this.commonUniforms.projectionMatrix.value)\n    }\n    render() {\n        this.gl.clearColor(0, 0, 0, 0), this.gl.clearDepth(1), this.meshes.forEach(e => e.draw())\n    }\n}\n\n\n\n//Sets initial properties\nfunction e(object, propertyName, val) {\n    return propertyName in object ? Object.defineProperty(object, propertyName, {\n        value: val,\n        enumerable: !0,\n        configurable: !0,\n        writable: !0\n    }) : object[propertyName] = val, object\n}\n\n//Gradient object\nclass Gradient {\n    constructor(...t) {\n        e(this, \"el\", void 0), e(this, \"cssVarRetries\", 0), e(this, \"maxCssVarRetries\", 200), e(this, \"angle\", 0), e(this, \"isLoadedClass\", !1), e(this, \"isScrolling\", !1), /*e(this, \"isStatic\", o.disableAmbientAnimations()),*/ e(this, \"scrollingTimeout\", void 0), e(this, \"scrollingRefreshDelay\", 200), e(this, \"isIntersecting\", !1), e(this, \"shaderFiles\", void 0), e(this, \"vertexShader\", void 0), e(this, \"sectionColors\", void 0), e(this, \"computedCanvasStyle\", void 0), e(this, \"conf\", void 0), e(this, \"uniforms\", void 0), e(this, \"t\", 1253106), e(this, \"last\", 0), e(this, \"width\", void 0), e(this, \"minWidth\", 1111), e(this, \"height\", 600), e(this, \"xSegCount\", void 0), e(this, \"ySegCount\", void 0), e(this, \"mesh\", void 0), e(this, \"material\", void 0), e(this, \"geometry\", void 0), e(this, \"minigl\", void 0), e(this, \"scrollObserver\", void 0), e(this, \"amp\", 320), e(this, \"seed\", 5), e(this, \"freqX\", 14e-5), e(this, \"freqY\", 29e-5), e(this, \"freqDelta\", 1e-5), e(this, \"activeColors\", [1, 1, 1, 1]), e(this, \"isMetaKey\", !1), e(this, \"isGradientLegendVisible\", !1), e(this, \"isMouseDown\", !1), e(this, \"handleScroll\", () => {\n            clearTimeout(this.scrollingTimeout), this.scrollingTimeout = setTimeout(this.handleScrollEnd, this.scrollingRefreshDelay), this.isGradientLegendVisible && this.hideGradientLegend(), this.conf.playing && (this.isScrolling = !0, this.pause())\n        }), e(this, \"handleScrollEnd\", () => {\n            this.isScrolling = !1, this.isIntersecting && this.play()\n        }), e(this, \"resize\", () => {\n            this.width = window.innerWidth, this.minigl.setSize(this.width, this.height), this.minigl.setOrthographicCamera(), this.xSegCount = Math.ceil(this.width * this.conf.density[0]), this.ySegCount = Math.ceil(this.height * this.conf.density[1]), this.mesh.geometry.setTopology(this.xSegCount, this.ySegCount), this.mesh.geometry.setSize(this.width, this.height), this.mesh.material.uniforms.u_shadow_power.value = this.width < 600 ? 5 : 6\n        }), e(this, \"handleMouseDown\", e => {\n            this.isGradientLegendVisible && (this.isMetaKey = e.metaKey, this.isMouseDown = !0, !1 === this.conf.playing && requestAnimationFrame(this.animate))\n        }), e(this, \"handleMouseUp\", () => {\n            this.isMouseDown = !1\n        }), e(this, \"animate\", e => {\n            if (!this.shouldSkipFrame(e) || this.isMouseDown) {\n                if (this.t += Math.min(e - this.last, 1e3 / 15), this.last = e, this.isMouseDown) {\n                    let e = 160;\n                    this.isMetaKey && (e = -160), this.t += e\n                }\n                this.mesh.material.uniforms.u_time.value = this.t, this.minigl.render()\n\n            }\n            if (0 !== this.last && this.isStatic) return this.minigl.render(), void this.disconnect();\n            (/*this.isIntersecting && */this.conf.playing || this.isMouseDown) && requestAnimationFrame(this.animate)\n        }), e(this, \"addIsLoadedClass\", () => {\n            /*this.isIntersecting && */!this.isLoadedClass && (this.isLoadedClass = !0, this.el.classList.add(\"isLoaded\"), setTimeout(() => {\n            this.el.parentElement.classList.add(\"isLoaded\")\n        }, 3e3))\n        }), e(this, \"pause\", () => {\n            this.conf.playing = false\n        }), e(this, \"play\", () => {\n            requestAnimationFrame(this.animate), this.conf.playing = true\n        }), e(this, \"initGradient\", (selector) => {\n            this.el = document.querySelector(selector);\n            this.connect();\n            return this;\n        })\n    }\n    async connect() {\n        this.shaderFiles = {\n            vertex: \"varying vec3 v_color;\\n\\nvoid main() {\\n  float time = u_time * u_global.noiseSpeed;\\n\\n  vec2 noiseCoord = resolution * uvNorm * u_global.noiseFreq;\\n\\n  vec2 st = 1. - uvNorm.xy;\\n\\n  //\\n  // Tilting the plane\\n  //\\n\\n  // Front-to-back tilt\\n  float tilt = resolution.y / 2.0 * uvNorm.y;\\n\\n  // Left-to-right angle\\n  float incline = resolution.x * uvNorm.x / 2.0 * u_vertDeform.incline;\\n\\n  // Up-down shift to offset incline\\n  float offset = resolution.x / 2.0 * u_vertDeform.incline * mix(u_vertDeform.offsetBottom, u_vertDeform.offsetTop, uv.y);\\n\\n  //\\n  // Vertex noise\\n  //\\n\\n  float noise = snoise(vec3(\\n    noiseCoord.x * u_vertDeform.noiseFreq.x + time * u_vertDeform.noiseFlow,\\n    noiseCoord.y * u_vertDeform.noiseFreq.y,\\n    time * u_vertDeform.noiseSpeed + u_vertDeform.noiseSeed\\n  )) * u_vertDeform.noiseAmp;\\n\\n  // Fade noise to zero at edges\\n  noise *= 1.0 - pow(abs(uvNorm.y), 2.0);\\n\\n  // Clamp to 0\\n  noise = max(0.0, noise);\\n\\n  vec3 pos = vec3(\\n    position.x,\\n    position.y + tilt + incline + noise - offset,\\n    position.z\\n  );\\n\\n  //\\n  // Vertex color, to be passed to fragment shader\\n  //\\n\\n  if (u_active_colors[0] == 1.) {\\n    v_color = u_baseColor;\\n  }\\n\\n  for (int i = 0; i < u_waveLayers_length; i++) {\\n    if (u_active_colors[i + 1] == 1.) {\\n      WaveLayers layer = u_waveLayers[i];\\n\\n      float noise = smoothstep(\\n        layer.noiseFloor,\\n        layer.noiseCeil,\\n        snoise(vec3(\\n          noiseCoord.x * layer.noiseFreq.x + time * layer.noiseFlow,\\n          noiseCoord.y * layer.noiseFreq.y,\\n          time * layer.noiseSpeed + layer.noiseSeed\\n        )) / 2.0 + 0.5\\n      );\\n\\n      v_color = blendNormal(v_color, layer.color, pow(noise, 4.));\\n    }\\n  }\\n\\n  //\\n  // Finish\\n  //\\n\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\\n}\",\n            noise: \"//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex\\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n//\\n\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) {\\n    return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise(vec3 v)\\n{\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g;\\n  vec3 i1 = min( g.xyz, l.zxy );\\n  vec3 i2 = max( g.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289(i);\\n  vec4 p = permute( permute( permute(\\n            i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n          + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n          + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n}\",\n            blend: \"//\\n// https://github.com/jamieowen/glsl-blend\\n//\\n\\n// Normal\\n\\nvec3 blendNormal(vec3 base, vec3 blend) {\\n\\treturn blend;\\n}\\n\\nvec3 blendNormal(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendNormal(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Screen\\n\\nfloat blendScreen(float base, float blend) {\\n\\treturn 1.0-((1.0-base)*(1.0-blend));\\n}\\n\\nvec3 blendScreen(vec3 base, vec3 blend) {\\n\\treturn vec3(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));\\n}\\n\\nvec3 blendScreen(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendScreen(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Multiply\\n\\nvec3 blendMultiply(vec3 base, vec3 blend) {\\n\\treturn base*blend;\\n}\\n\\nvec3 blendMultiply(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendMultiply(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Overlay\\n\\nfloat blendOverlay(float base, float blend) {\\n\\treturn base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));\\n}\\n\\nvec3 blendOverlay(vec3 base, vec3 blend) {\\n\\treturn vec3(blendOverlay(base.r,blend.r),blendOverlay(base.g,blend.g),blendOverlay(base.b,blend.b));\\n}\\n\\nvec3 blendOverlay(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendOverlay(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Hard light\\n\\nvec3 blendHardLight(vec3 base, vec3 blend) {\\n\\treturn blendOverlay(blend,base);\\n}\\n\\nvec3 blendHardLight(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendHardLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Soft light\\n\\nfloat blendSoftLight(float base, float blend) {\\n\\treturn (blend<0.5)?(2.0*base*blend+base*base*(1.0-2.0*blend)):(sqrt(base)*(2.0*blend-1.0)+2.0*base*(1.0-blend));\\n}\\n\\nvec3 blendSoftLight(vec3 base, vec3 blend) {\\n\\treturn vec3(blendSoftLight(base.r,blend.r),blendSoftLight(base.g,blend.g),blendSoftLight(base.b,blend.b));\\n}\\n\\nvec3 blendSoftLight(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendSoftLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Color dodge\\n\\nfloat blendColorDodge(float base, float blend) {\\n\\treturn (blend==1.0)?blend:min(base/(1.0-blend),1.0);\\n}\\n\\nvec3 blendColorDodge(vec3 base, vec3 blend) {\\n\\treturn vec3(blendColorDodge(base.r,blend.r),blendColorDodge(base.g,blend.g),blendColorDodge(base.b,blend.b));\\n}\\n\\nvec3 blendColorDodge(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendColorDodge(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Color burn\\n\\nfloat blendColorBurn(float base, float blend) {\\n\\treturn (blend==0.0)?blend:max((1.0-((1.0-base)/blend)),0.0);\\n}\\n\\nvec3 blendColorBurn(vec3 base, vec3 blend) {\\n\\treturn vec3(blendColorBurn(base.r,blend.r),blendColorBurn(base.g,blend.g),blendColorBurn(base.b,blend.b));\\n}\\n\\nvec3 blendColorBurn(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendColorBurn(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Vivid Light\\n\\nfloat blendVividLight(float base, float blend) {\\n\\treturn (blend<0.5)?blendColorBurn(base,(2.0*blend)):blendColorDodge(base,(2.0*(blend-0.5)));\\n}\\n\\nvec3 blendVividLight(vec3 base, vec3 blend) {\\n\\treturn vec3(blendVividLight(base.r,blend.r),blendVividLight(base.g,blend.g),blendVividLight(base.b,blend.b));\\n}\\n\\nvec3 blendVividLight(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendVividLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Lighten\\n\\nfloat blendLighten(float base, float blend) {\\n\\treturn max(blend,base);\\n}\\n\\nvec3 blendLighten(vec3 base, vec3 blend) {\\n\\treturn vec3(blendLighten(base.r,blend.r),blendLighten(base.g,blend.g),blendLighten(base.b,blend.b));\\n}\\n\\nvec3 blendLighten(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendLighten(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Linear burn\\n\\nfloat blendLinearBurn(float base, float blend) {\\n\\t// Note : Same implementation as BlendSubtractf\\n\\treturn max(base+blend-1.0,0.0);\\n}\\n\\nvec3 blendLinearBurn(vec3 base, vec3 blend) {\\n\\t// Note : Same implementation as BlendSubtract\\n\\treturn max(base+blend-vec3(1.0),vec3(0.0));\\n}\\n\\nvec3 blendLinearBurn(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendLinearBurn(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Linear dodge\\n\\nfloat blendLinearDodge(float base, float blend) {\\n\\t// Note : Same implementation as BlendAddf\\n\\treturn min(base+blend,1.0);\\n}\\n\\nvec3 blendLinearDodge(vec3 base, vec3 blend) {\\n\\t// Note : Same implementation as BlendAdd\\n\\treturn min(base+blend,vec3(1.0));\\n}\\n\\nvec3 blendLinearDodge(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendLinearDodge(base, blend) * opacity + base * (1.0 - opacity));\\n}\\n\\n// Linear light\\n\\nfloat blendLinearLight(float base, float blend) {\\n\\treturn blend<0.5?blendLinearBurn(base,(2.0*blend)):blendLinearDodge(base,(2.0*(blend-0.5)));\\n}\\n\\nvec3 blendLinearLight(vec3 base, vec3 blend) {\\n\\treturn vec3(blendLinearLight(base.r,blend.r),blendLinearLight(base.g,blend.g),blendLinearLight(base.b,blend.b));\\n}\\n\\nvec3 blendLinearLight(vec3 base, vec3 blend, float opacity) {\\n\\treturn (blendLinearLight(base, blend) * opacity + base * (1.0 - opacity));\\n}\",\n            fragment: \"varying vec3 v_color;\\n\\nvoid main() {\\n  vec3 color = v_color;\\n  if (u_darken_top == 1.0) {\\n    vec2 st = gl_FragCoord.xy/resolution.xy;\\n    color.g -= pow(st.y + sin(-12.0) * st.x, u_shadow_power) * 0.4;\\n  }\\n  gl_FragColor = vec4(color, 1.0);\\n}\"\n        },\n            this.conf = {\n                presetName: \"\",\n                wireframe: false,\n                density: [.06, .16],\n                zoom: 1,\n                rotation: 0,\n                playing: true\n            },\n            document.querySelectorAll(\"canvas\").length < 1 ? console.log(\"DID NOT LOAD HERO STRIPE CANVAS\") : (\n\n                this.minigl = new MiniGl(this.el, null, null, !0),\n                requestAnimationFrame(() => {\n                    this.el && (this.computedCanvasStyle = getComputedStyle(this.el), this.waitForCssVars())\n                })\n                /*\n                this.scrollObserver = await s.create(.1, !1),\n                this.scrollObserver.observe(this.el),\n                this.scrollObserver.onSeparate(() => {\n                    window.removeEventListener(\"scroll\", this.handleScroll), window.removeEventListener(\"mousedown\", this.handleMouseDown), window.removeEventListener(\"mouseup\", this.handleMouseUp), window.removeEventListener(\"keydown\", this.handleKeyDown), this.isIntersecting = !1, this.conf.playing && this.pause()\n                }), \n                this.scrollObserver.onIntersect(() => {\n                    window.addEventListener(\"scroll\", this.handleScroll), window.addEventListener(\"mousedown\", this.handleMouseDown), window.addEventListener(\"mouseup\", this.handleMouseUp), window.addEventListener(\"keydown\", this.handleKeyDown), this.isIntersecting = !0, this.addIsLoadedClass(), this.play()\n                })*/\n\n            )\n    }\n    disconnect() {\n        this.scrollObserver && (window.removeEventListener(\"scroll\", this.handleScroll), window.removeEventListener(\"mousedown\", this.handleMouseDown), window.removeEventListener(\"mouseup\", this.handleMouseUp), window.removeEventListener(\"keydown\", this.handleKeyDown), this.scrollObserver.disconnect()), window.removeEventListener(\"resize\", this.resize)\n    }\n    initMaterial() {\n        this.uniforms = {\n            u_time: new this.minigl.Uniform({\n                value: 0\n            }),\n            u_shadow_power: new this.minigl.Uniform({\n                value: 5\n            }),\n            u_darken_top: new this.minigl.Uniform({\n                value: \"\" === this.el.dataset.jsDarkenTop ? 1 : 0\n            }),\n            u_active_colors: new this.minigl.Uniform({\n                value: this.activeColors,\n                type: \"vec4\"\n            }),\n            u_global: new this.minigl.Uniform({\n                value: {\n                    noiseFreq: new this.minigl.Uniform({\n                        value: [this.freqX, this.freqY],\n                        type: \"vec2\"\n                    }),\n                    noiseSpeed: new this.minigl.Uniform({\n                        value: 5e-6\n                    })\n                },\n                type: \"struct\"\n            }),\n            u_vertDeform: new this.minigl.Uniform({\n                value: {\n                    incline: new this.minigl.Uniform({\n                        value: Math.sin(this.angle) / Math.cos(this.angle)\n                    }),\n                    offsetTop: new this.minigl.Uniform({\n                        value: -.5\n                    }),\n                    offsetBottom: new this.minigl.Uniform({\n                        value: -.5\n                    }),\n                    noiseFreq: new this.minigl.Uniform({\n                        value: [3, 4],\n                        type: \"vec2\"\n                    }),\n                    noiseAmp: new this.minigl.Uniform({\n                        value: this.amp\n                    }),\n                    noiseSpeed: new this.minigl.Uniform({\n                        value: 10\n                    }),\n                    noiseFlow: new this.minigl.Uniform({\n                        value: 3\n                    }),\n                    noiseSeed: new this.minigl.Uniform({\n                        value: this.seed\n                    })\n                },\n                type: \"struct\",\n                excludeFrom: \"fragment\"\n            }),\n            u_baseColor: new this.minigl.Uniform({\n                value: this.sectionColors[0],\n                type: \"vec3\",\n                excludeFrom: \"fragment\"\n            }),\n            u_waveLayers: new this.minigl.Uniform({\n                value: [],\n                excludeFrom: \"fragment\",\n                type: \"array\"\n            })\n        };\n        for (let e = 1; e < this.sectionColors.length; e += 1) this.uniforms.u_waveLayers.value.push(new this.minigl.Uniform({\n            value: {\n                color: new this.minigl.Uniform({\n                    value: this.sectionColors[e],\n                    type: \"vec3\"\n                }),\n                noiseFreq: new this.minigl.Uniform({\n                    value: [2 + e / this.sectionColors.length, 3 + e / this.sectionColors.length],\n                    type: \"vec2\"\n                }),\n                noiseSpeed: new this.minigl.Uniform({\n                    value: 11 + .3 * e\n                }),\n                noiseFlow: new this.minigl.Uniform({\n                    value: 6.5 + .3 * e\n                }),\n                noiseSeed: new this.minigl.Uniform({\n                    value: this.seed + 10 * e\n                }),\n                noiseFloor: new this.minigl.Uniform({\n                    value: .1\n                }),\n                noiseCeil: new this.minigl.Uniform({\n                    value: .63 + .07 * e\n                })\n            },\n            type: \"struct\"\n        }));\n        return this.vertexShader = [this.shaderFiles.noise, this.shaderFiles.blend, this.shaderFiles.vertex].join(\"\\n\\n\"), new this.minigl.Material(this.vertexShader, this.shaderFiles.fragment, this.uniforms)\n    }\n    initMesh() {\n        this.material = this.initMaterial(), this.geometry = new this.minigl.PlaneGeometry, this.mesh = new this.minigl.Mesh(this.geometry, this.material)\n    }\n    shouldSkipFrame(e) {\n        return !!window.document.hidden || (!this.conf.playing || (parseInt(e, 10) % 2 == 0 || void 0))\n    }\n    updateFrequency(e) {\n        this.freqX += e, this.freqY += e\n    }\n    toggleColor(index) {\n        this.activeColors[index] = 0 === this.activeColors[index] ? 1 : 0\n    }\n    showGradientLegend() {\n        this.width > this.minWidth && (this.isGradientLegendVisible = !0, document.body.classList.add(\"isGradientLegendVisible\"))\n    }\n    hideGradientLegend() {\n        this.isGradientLegendVisible = !1, document.body.classList.remove(\"isGradientLegendVisible\")\n    }\n    init() {\n        this.initGradientColors(), this.initMesh(), this.resize(), requestAnimationFrame(this.animate), window.addEventListener(\"resize\", this.resize)\n    }\n    /*\n    * Waiting for the css variables to become available, usually on page load before we can continue.\n    * Using default colors assigned below if no variables have been found after maxCssVarRetries\n    */\n    waitForCssVars() {\n        if (this.computedCanvasStyle && -1 !== this.computedCanvasStyle.getPropertyValue(\"--gradient-color-1\").indexOf(\"#\")) this.init(), this.addIsLoadedClass();\n        else {\n            if (this.cssVarRetries += 1, this.cssVarRetries > this.maxCssVarRetries) {\n                return this.sectionColors = [16711680, 16711680, 16711935, 65280, 255], void this.init();\n            }\n            requestAnimationFrame(() => this.waitForCssVars())\n        }\n    }\n    /*\n    * Initializes the four section colors by retrieving them from css variables.\n    */\n    initGradientColors() {\n        this.sectionColors = [\"--gradient-color-1\", \"--gradient-color-2\", \"--gradient-color-3\", \"--gradient-color-4\"].map(cssPropertyName => {\n            let hex = this.computedCanvasStyle.getPropertyValue(cssPropertyName).trim();\n            //Check if shorthand hex value was used and double the length so the conversion in normalizeColor will work.\n            if (4 === hex.length) {\n                const hexTemp = hex.substr(1).split(\"\").map(hexTemp => hexTemp + hexTemp).join(\"\");\n                hex = `#${hexTemp}`\n            }\n            return hex && `0x${hex.substr(1)}`\n        }).filter(Boolean).map(normalizeColor)\n    }\n}\n\n\n\n\n/*\n*Finally initializing the Gradient class, assigning a canvas to it and calling Gradient.connect() which initializes everything,\n* Use Gradient.pause() and Gradient.play() for controls.\n*\n* Here are some default property values you can change anytime:\n* Amplitude:    Gradient.amp = 0\n* Colors:       Gradient.sectionColors (if you change colors, use normalizeColor(#hexValue)) before you assign it.\n*\n*\n* Useful functions\n* Gradient.toggleColor(index)\n* Gradient.updateFrequency(freq)\n*/\n\nexport { Gradient }"],"names":["normalizeColor","hexCode","reduce","t","n","Object","assign","_defineProperty","MiniGl","canvas","width","height","debug","arguments","length","undefined","_classCallCheck","_miniGl","this","debug_output","document","location","search","toLowerCase","indexOf","gl","getContext","antialias","meshes","context","setSize","lastDebugMsg","e","_console","Date","console","log","apply","toLocaleTimeString","Array","Math","max","join","concat","_toConsumableArray","from","slice","defineProperties","Material","enumerable","value","vertexShaders","fragments","uniforms","material","getShaderByType","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","error","getShaderInfoLog","getUniformVariableDeclarations","entries","map","_ref","_ref2","_slicedToArray","uniform","getDeclaration","uniformInstances","prefix","vertexSource","commonUniforms","Source","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","program","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","useProgram","attachUniforms","_createClass","key","name","forEach","_ref3","_ref4","i","_ref5","_ref6","push","getUniformLocation","Uniform","typeFn","float","int","vec2","vec3","vec4","mat4","update","transpose","excludeFrom","name_no_prefix","replace","charAt","toUpperCase","_ref7","_ref8","PlaneGeometry","orientation","createBuffer","attributes","position","Attribute","target","ARRAY_BUFFER","size","uv","uvNorm","index","ELEMENT_ARRAY_BUFFER","UNSIGNED_SHORT","setTopology","xSegCount","ySegCount","vertexCount","quadCount","values","Float32Array","Uint16Array","s","geometry","o","r","segment_width","segment_height","yIndex","xIndex","l","Mesh","mesh","wireframe","attributeInstances","_ref9","_ref10","attribute","attach","_ref11","_ref12","use","drawElements","LINES","TRIANGLES","_this","filter","FLOAT","normalized","buffer","bindBuffer","bufferData","STATIC_DRAW","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","a","projectionMatrix","modelViewMatrix","resolution","aspectRatio","viewport","clearColor","clearDepth","draw","object","propertyName","val","defineProperty","configurable","writable","Gradient","_this2","clearTimeout","scrollingTimeout","setTimeout","handleScrollEnd","scrollingRefreshDelay","isGradientLegendVisible","hideGradientLegend","conf","playing","isScrolling","pause","isIntersecting","play","window","innerWidth","minigl","setOrthographicCamera","ceil","density","u_shadow_power","isMetaKey","metaKey","isMouseDown","requestAnimationFrame","animate","shouldSkipFrame","min","last","u_time","render","isStatic","disconnect","isLoadedClass","el","classList","add","parentElement","selector","querySelector","connect","_connect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this3","wrap","_context","prev","next","shaderFiles","vertex","noise","blend","fragment","presetName","zoom","rotation","querySelectorAll","computedCanvasStyle","getComputedStyle","waitForCssVars","stop","scrollObserver","removeEventListener","handleScroll","handleMouseDown","handleMouseUp","handleKeyDown","resize","u_darken_top","dataset","jsDarkenTop","u_active_colors","activeColors","u_global","noiseFreq","freqX","freqY","noiseSpeed","u_vertDeform","incline","sin","angle","cos","offsetTop","offsetBottom","noiseAmp","amp","noiseFlow","noiseSeed","seed","u_baseColor","sectionColors","u_waveLayers","color","noiseFloor","noiseCeil","initMaterial","hidden","parseInt","minWidth","body","remove","initGradientColors","initMesh","addEventListener","_this4","getPropertyValue","init","addIsLoadedClass","cssVarRetries","maxCssVarRetries","_this5","cssPropertyName","hex","trim","hexTemp","substr","split","Boolean"],"sourceRoot":""}